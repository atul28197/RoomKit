<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_line_ex_8cs" kind="file" language="C#">
    <compoundname>LineEx.cs</compoundname>
    <innerclass refid="class_room_kit_1_1_line_ex" prot="public">RoomKit::LineEx</innerclass>
    <innernamespace refid="namespace_room_kit">RoomKit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_system" kindref="compound">System</ref>;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_system" kindref="compound">System</ref>.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_system" kindref="compound">System</ref>.Linq;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Hypar.Geometry;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_clipper_lib" kindref="compound">ClipperLib</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_room_kit" kindref="compound">RoomKit</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LineEx</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Line<sp/>Rotate(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>Line<sp/>line,<sp/>Vector3<sp/>pivot,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>theta<sp/>=<sp/>angle<sp/>*<sp/>(Math.PI<sp/>/<sp/>180);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>sX<sp/>=<sp/>(Math.Cos(theta)<sp/>*<sp/>(line.Start.X<sp/>-<sp/>pivot.X))<sp/>-<sp/>(Math.Sin(theta)<sp/>*<sp/>(line.Start.Y<sp/>-<sp/>pivot.Y))<sp/>+<sp/>pivot.X;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>sY<sp/>=<sp/>(Math.Sin(theta)<sp/>*<sp/>(line.Start.X<sp/>-<sp/>pivot.X))<sp/>+<sp/>(Math.Cos(theta)<sp/>*<sp/>(line.Start.Y<sp/>-<sp/>pivot.Y))<sp/>+<sp/>pivot.Y;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>eX<sp/>=<sp/>(Math.Cos(theta)<sp/>*<sp/>(line.End.X<sp/>-<sp/>pivot.X))<sp/>-<sp/>(Math.Sin(theta)<sp/>*<sp/>(line.End.Y<sp/>-<sp/>pivot.Y))<sp/>+<sp/>pivot.X;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>eY<sp/>=<sp/>(Math.Sin(theta)<sp/>*<sp/>(line.End.X<sp/>-<sp/>pivot.X))<sp/>+<sp/>(Math.Cos(theta)<sp/>*<sp/>(line.End.Y<sp/>-<sp/>pivot.Y))<sp/>+<sp/>pivot.Y;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Line(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(sX,<sp/>sY),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(eX,<sp/>eY));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Line<sp/>MoveFromTo(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>Line<sp/>line,<sp/>Vector3<sp/>from,<sp/>Vector3<sp/>to)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(to.X<sp/>-<sp/>from.X,<sp/>to.Y<sp/>-<sp/>from.Y);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>start<sp/>=<sp/>line.Start<sp/>+<sp/>v;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Line(line.Start<sp/>+<sp/>v,<sp/>line.End<sp/>+<sp/>v);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Anthony/Oasis/Business/Hypar/GitHub/RoomKit/RoomKit/LineEx.cs"/>
  </compounddef>
</doxygen>
